/**
 * Teste simples para verificar as fun√ß√µes da calculadora (vers√£o CommonJS)
 * Execute com: node test-calculator-cjs.js
 */

// Simula√ß√£o das fun√ß√µes para testes (vers√£o CommonJS)
const evaluateExpression = (expression) => {
  try {
    let cleanExpression = expression
      .replace(/√ó/g, '*')
      .replace(/√∑/g, '/')
      .replace(/œÄ/g, Math.PI.toString())
      .trim();

    if (!/^[0-9+\-*/.() ]+$/.test(cleanExpression)) {
      throw new Error('Express√£o inv√°lida');
    }

    const result = new Function('return ' + cleanExpression)();

    if (!isFinite(result)) {
      throw new Error('Resultado inv√°lido');
    }

    return result;
  } catch (error) {
    throw new Error('Erro no c√°lculo');
  }
};

const calculateScientificFunction = (func, value) => {
  const num = parseFloat(value);

  if (isNaN(num)) {
    throw new Error('Valor inv√°lido');
  }

  switch (func) {
    case 'sin':
      return Math.sin(num);
    case 'cos':
      return Math.cos(num);
    case 'tan':
      return Math.tan(num);
    case 'sqrt':
    case '‚àö':
      if (num < 0) {
        throw new Error('Raiz de n√∫mero negativo');
      }
      return Math.sqrt(num);
    case 'square':
    case 'x¬≤':
      return Math.pow(num, 2);
    case 'percent':
    case '%':
      return num / 100;
    default:
      throw new Error('Fun√ß√£o n√£o reconhecida');
  }
};

const formatResult = (result) => {
  if (!isFinite(result)) {
    return 'Erro';
  }

  if (Math.abs(result) >= 1e10 || (Math.abs(result) < 1e-6 && result !== 0)) {
    return result.toExponential(6);
  }

  const formatted = parseFloat(result.toPrecision(12)).toString();

  if (formatted.length > 12) {
    return parseFloat(result.toPrecision(8)).toString();
  }

  return formatted;
};

const isOperator = (char) => {
  return ['+', '-', '√ó', '√∑', '*', '/'].includes(char);
};

const isNumber = (char) => {
  return /^[0-9.]$/.test(char);
};

const getLastNumber = (expression) => {
  const matches = expression.match(/[0-9.]+$/);
  return matches ? matches[0] : '';
};

const removeLastNumber = (expression) => {
  return expression.replace(/[0-9.]+$/, '');
};

console.log('üßÆ Testando Calculadora Cient√≠fica\n');

// Teste de opera√ß√µes b√°sicas
console.log('üìä Opera√ß√µes B√°sicas:');
try {
  console.log('5 + 3 =', evaluateExpression('5+3')); // 8
  console.log('10 - 4 =', evaluateExpression('10-4')); // 6
  console.log('7 √ó 8 =', evaluateExpression('7*8')); // 56
  console.log('15 √∑ 3 =', evaluateExpression('15/3')); // 5
  console.log('2 + 3 √ó 4 =', evaluateExpression('2+3*4')); // 14
} catch (error) {
  console.error('Erro nas opera√ß√µes b√°sicas:', error.message);
}

console.log('\nüî¨ Fun√ß√µes Cient√≠ficas:');
try {
  console.log('5¬≤ =', calculateScientificFunction('x¬≤', 5)); // 25
  console.log('‚àö16 =', calculateScientificFunction('‚àö', 16)); // 4
  console.log('sin(0) =', calculateScientificFunction('sin', 0)); // 0
  console.log('cos(0) =', calculateScientificFunction('cos', 0)); // 1
  console.log('50% =', calculateScientificFunction('%', 50)); // 0.5
} catch (error) {
  console.error('Erro nas fun√ß√µes cient√≠ficas:', error.message);
}

console.log('\nüõ°Ô∏è Tratamento de Erros:');
try {
  console.log('5 √∑ 0 =', evaluateExpression('5/0')); // Deve dar erro
} catch (error) {
  console.log('‚úÖ Divis√£o por zero tratada:', error.message);
}

try {
  console.log('‚àö(-4) =', calculateScientificFunction('‚àö', -4)); // Deve dar erro
} catch (error) {
  console.log('‚úÖ Raiz negativa tratada:', error.message);
}

console.log('\nüîß Fun√ß√µes Utilit√°rias:');
console.log('isOperator("+") =', isOperator('+')); // true
console.log('isNumber("5") =', isNumber('5')); // true
console.log('getLastNumber("5+3") =', getLastNumber('5+3')); // "3"
console.log('removeLastNumber("5+3") =', removeLastNumber('5+3')); // "5+"

console.log('\nüìê Formata√ß√£o de Resultados:');
console.log('formatResult(3.14159) =', formatResult(3.14159));
console.log('formatResult(1000000000000) =', formatResult(1000000000000));
console.log('formatResult(0.000001) =', formatResult(0.000001));

console.log('\n‚úÖ Todos os testes conclu√≠dos!');
